import logging
import os
from zoneinfo import ZoneInfo
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.events import EVENT_JOB_EXECUTED
from datetime import datetime, timedelta
from random import shuffle
import asyncio
import random
from collections import defaultdict
from keyboards.user_buttons import meeting_question_kb
from sqlalchemy import select, or_, and_, func
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from globals import job_context
from aiogram import Bot
from aiogram.fsm.state import State, StatesGroup

from config import MOSCOW_TZ
from database.models import User, Pair, Setting, Feedback
from dotenv import load_dotenv


logger = logging.getLogger(__name__)

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL").replace("+asyncpg", "+psycopg")

# –ø–æ–¥–ª–∫—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–≥—Ä–µ—Å—Å–∞
scheduler = AsyncIOScheduler(
    jobstores={
        'default': SQLAlchemyJobStore(url=DATABASE_URL)
    },
    timezone='UTC'
)
# –ø—É—Å—Ç—å –ø–æ–∫–∞ —Ç—É—Ç –±—É–¥–µ—Ç –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ—Å—Ç–≥—Ä–µ—Å —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≥–¥–µ –ª—É—á—à–µ –±—ã—Ç—å
# scheduler = AsyncIOScheduler(
#         jobstores={'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')},
#         timezone='Europe/Moscow'
#     )

current_interval = None

class CommentStates(StatesGroup):
    waiting_for_comment = State()

async def feedback_dispatcher_wrapper():
    bot, dispatcher, session_maker = job_context.get_context()
    await feedback_dispatcher_job(bot, session_maker)

async def auto_pairing_wrapper():
    bot, dispatcher, session_maker = job_context.get_context()

    async with session_maker() as session:
        result = await session.execute(select(Setting))
        setting_obj = result.scalar_one_or_none()

        if setting_obj and setting_obj.auto_pairing_paused == 1:  # –µ—Å–ª–∏ –≤ –±–∞–∑–µ '1' (–∏–ª–∏ True)
            logger.info("üõë –ó–∞–¥–∞—á–∞ auto_pairing_weekly –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Ñ–ª–∞–≥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö).")
            return  # –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º auto_pairing

    await auto_pairing(session_maker, bot)

async def reload_scheduled_wrapper():
    _, _, session_maker = job_context.get_context()
    await reload_scheduled_jobs(session_maker)


# –ª–∞—Å—Ç –ø–∞—Ä–∞
async def get_latest_pair_id_for_user(session: AsyncSession, user_id: int) -> int | None:
    result = await session.execute(
        select(Pair.id)
        .where(
            and_(
                or_(
                    Pair.user1_id == user_id,
                    Pair.user2_id == user_id,
                    Pair.user3_id == user_id
                ),
                Pair.paired_at < datetime.utcnow()  # —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ
            )
        )
        .order_by(Pair.paired_at.desc())
    )
    pair_id = result.scalar_one_or_none()
    return pair_id

async def get_users_ready_for_matching(session: AsyncSession) -> list[User]:
    """–í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º."""

    result = await session.execute(select(Setting).filter_by(key='global_interval'))
    setting = result.scalars().first()
    global_interval = setting.value if setting else 2

    result = await session.execute(select(User))
    users = result.scalars().all()
    selected_users = []
    today = datetime.utcnow().date()

    for user in users:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–∞—É–∑–µ
        if user.pause_until and user.pause_until > today:
            continue

        user_interval = user.pairing_interval or global_interval

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º future_meeting –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if not user.is_active:
            if user_interval > global_interval and user.future_meeting == 0:
                user.future_meeting = 1
            continue  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ø–∞—Ä—ã –≤–æ–æ–±—â–µ

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if global_interval >= user_interval:
            user.future_meeting = 0
            selected_users.append(user)
        elif user.future_meeting == 1:
            user.future_meeting = 0
            selected_users.append(user)
        else:
            user.future_meeting = 1

    await session.commit()
    return selected_users


async def generate_unique_pairs(session, users: list[User]) -> list[Pair]:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä—ã, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π."""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—Å–µ—Ö –ø–∞—Ä
    result = await session.execute(select(Pair.user1_id, Pair.user2_id, Pair.user3_id))
    history = defaultdict(int)  # (min_id, max_id) -> count

    for row in result.fetchall():
        ids = [row.user1_id, row.user2_id]
        if row.user3_id:
            ids.append(row.user3_id)
        ids = sorted(ids)
        for i in range(len(ids)):
            for j in range(i + 1, len(ids)):
                history[(ids[i], ids[j])] += 1

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    random.shuffle(users)
    user_ids = [u.id for u in users]
    user_map = {u.id: u for u in users}
    used = set()
    pairs = []

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –ø–æ —á–∏—Å–ª—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    possible_pairs = []
    for i in range(len(user_ids)):
        for j in range(i + 1, len(user_ids)):
            u1, u2 = user_ids[i], user_ids[j]
            key = tuple(sorted((u1, u2)))
            if u1 not in used and u2 not in used:
                possible_pairs.append((history[key], u1, u2))

    possible_pairs.sort()  # –æ—Ç —Å–∞–º—ã—Ö —Ä–µ–¥–∫–∏—Ö –∫ —á–∞—Å—Ç—ã–º

    for _, u1, u2 in possible_pairs:
        if u1 not in used and u2 not in used:
            used.update([u1, u2])
            pairs.append((u1, u2))

    remaining = [uid for uid in user_ids if uid not in used]
    pair_objs = []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã –≤ –ë–î
    for u1_id, u2_id in pairs:
        u1, u2 = user_map[u1_id], user_map[u2_id]
        pair = Pair(
            user1_id=u1.id, user2_id=u2.id,
            paired_at=datetime.utcnow()
        )
        u1.last_paired_at = datetime.utcnow()
        u2.last_paired_at = datetime.utcnow()
        session.add(pair)
        pair_objs.append(pair)

    if remaining:
        odd = user_map[remaining[0]]
        odd.last_paired_at = datetime.utcnow()
        if pair_objs:
            last_pair = pair_objs[-1]
            last_pair.user3_id = odd.id
            session.add(last_pair)
        else:
            logger.info(f"‚ö†Ô∏è –û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –ø–∞—Ä—ã: {odd.id}")

    return pair_objs


async def notify_users_about_pairs(session: AsyncSession, pairs: list[Pair], bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–∞—Ä —á–µ—Ä–µ–∑ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è HTML-—Å—Å—ã–ª–∫–∏ —Å tg://user?id."""
    for pair in pairs:
        user_ids = [pair.user1_id, pair.user2_id]
        if pair.user3_id:
            user_ids.append(pair.user3_id)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–∞—Ä—ã
        result = await session.execute(
            select(User.id, User.username, User.telegram_id, User.first_name, User.last_name).where(User.id.in_(user_ids))
        )
        user_data = {
            row.id: {
                "telegram_id": row.telegram_id,
                "first_name": row.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "last_name": row.last_name,
                "username": row.username
            }
            for row in result.fetchall()
        }

        for user_id in user_ids:
            user_info = user_data.get(user_id)
            if not user_info or not user_info["telegram_id"]:
                logger.info(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ telegram_id –¥–ª—è user_id={user_id}")
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
            partner_links = []
            for partner_id in user_ids:
                if partner_id == user_id:
                    continue
                partner = user_data.get(partner_id)
                if partner and partner["telegram_id"]:
                    name = f'{partner["first_name"]} {partner["last_name"]}'.strip()
                    if partner['username']:
                        link = (f'üë• <a href="tg://user?id={partner["telegram_id"]}">{name}</a> '
                                f'(–µ—Å–ª–∏ –∏–º—è –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Ç–∞–∫: @{partner['username']})')
                    else:
                        link = (f'üë• <a href="tg://user?id={partner["telegram_id"]}">{name}</a> '
                                f'(–µ—Å–ª–∏ –∏–º—è –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '
                                '–∑–∞–ø—Ä–µ—Ç–∏–ª –µ–≥–æ —É–ø–æ–º–∏–Ω–∞—Ç—å, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ.)')
                    partner_links.append(link)
                else:
                    partner_links.append("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

            partners_str = ",\n".join(partner_links)

            message = (
                f"–ü—Ä–∏–≤–µ—Ç! ü§ó\n–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ —Ç–µ–±–µ –≤—ã–ø–∞–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å:\n"
                f"{partners_str}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ –≤ –ª—é–±–æ–º —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
                f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–π —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏!"
            )

            try:
                logger.debug(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}')
                await bot.send_message(chat_id=user_info["telegram_id"], text=message, parse_mode="HTML")
                await asyncio.sleep(0.05)
            except Exception as e:
                logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={user_id}: {e}")


async def auto_pairing(session_maker, bot: Bot):
    async with session_maker() as session:
        users = await get_users_ready_for_matching(session)
        if len(users) < 2:
            logger.info("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä.")
            return

        # üí° –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä
        pairs = await generate_unique_pairs(session, users)

        await session.commit()
        logger.info(f"‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(pairs)} –ø–∞—Ä.")

        await notify_users_about_pairs(session, pairs, bot)

async def save_comment(
    telegram_id: int,
    comment_text: str,
    session_maker: async_sessionmaker,
    pair_id: int,
    force_update: bool = False
) -> str:
    async with session_maker() as session:
        result_user = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result_user.scalar()
        if user is None:
            return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"

        user_id = user.id

        result_feedback = await session.execute(
            select(Feedback).where(Feedback.user_id == user_id, Feedback.pair_id == pair_id)
        )
        feedback = result_feedback.scalar()

        if feedback:
            feedback.comment = comment_text
            feedback.submitted_at = datetime.utcnow()
            feedback.did_meet = True
            status_msg = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ" if force_update else "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ"
        else:
            new_feedback = Feedback(
                pair_id=pair_id,
                user_id=user_id,
                comment=comment_text,
                did_meet=True,
                submitted_at=datetime.utcnow()
            )
            session.add(new_feedback)
            status_msg = "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚úÖ"

        await session.commit()
        return status_msg


# –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –µ–≥–æ –≤ –ø—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç
def show_next_runs(scheduler: AsyncIOScheduler):
    logger.debug("üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ –∑–∞–¥–∞—á:")

    for job in scheduler.get_jobs():
        next_run_utc = job.next_run_time
        next_run_msk = next_run_utc.astimezone(MOSCOW_TZ)
        logger.debug(f"üõ† –ó–∞–¥–∞—á–∞ '{job.id}' –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤: {next_run_msk.strftime('%Y-%m-%d %H:%M:%S') if next_run_msk else '–Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞'}")

# def show_next_runs(scheduler: AsyncIOScheduler):
#     print("üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ –∑–∞–¥–∞—á:")
#
#     for job in scheduler.get_jobs():
#         next_run = job.next_run_time
#         print(f"üõ† –ó–∞–¥–∞—á–∞ '{job.id}' –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤: {next_run.strftime('%Y-%m-%d %H:%M:%S') if next_run else '–Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞'}")
def get_next_pairing_date() -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä
    —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É –∑–∞–¥–∞—á.
    """
    job = next((job for job in scheduler.get_jobs() if job.id == 'auto_pairing_weekly'), None)

    if job:
        next_run_utc = job.next_run_time
        next_run_msk = next_run_utc.astimezone(MOSCOW_TZ)
        next_run_str = next_run_msk.strftime('%Y-%m-%d %H:%M:%S –ø–æ –ú–°–ö')
        logger.debug(f"üõ† –ó–∞–¥–∞—á–∞ '{job.id}' –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è: {next_run_str}")
        return next_run_str
    return None


# –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –µ–≥–æ –≤ –ø—Ä–æ–¥–µ –Ω–µ –±—É–¥–µ—Ç
def job_listener(event):
    show_next_runs(scheduler)


async def feedback_dispatcher_job(bot: Bot, session_maker):
    async with session_maker() as session:
        result_pairs = await session.execute(
            select(Pair).where(Pair.feedback_sent == False)
        )
        pairs = result_pairs.scalars().all()

        if not pairs:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞.")
            return

        for pair in pairs:
            user_ids = [pair.user1_id, pair.user2_id]
            if pair.user3_id:
                user_ids.append(pair.user3_id)

            result_users = await session.execute(
                select(User).where(User.id.in_(user_ids), User.has_permission == True)
            )
            users = result_users.scalars().all()

            success = True
            for user in users:
                try:
                    await bot.send_message(
                        user.telegram_id,
                        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—à–ª–∞ –ª–∏ –≤—Å—Ç—Ä–µ—á–∞?",
                        reply_markup=meeting_question_kb(pair.id)
                    )
                    await asyncio.sleep(0.05)
                except Exception as e:
                    logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è {user.telegram_id}: {e}")
                    success = False  # —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏

            # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
            if success:
                pair.feedback_sent = True

        await session.commit()

async def schedule_feedback_dispatcher_for_auto_pairing(start_date_for_auto_pairing):
    start_date_for_feedback_dispatcher = start_date_for_auto_pairing - timedelta(days=3)
    return start_date_for_feedback_dispatcher


# –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ auto_pairing_weekly
def force_reschedule_job(job_id, func, interval_minutes, session_maker, start_date=None):
    tz = ZoneInfo("Europe/Moscow")
    effective_start = (start_date or datetime.now(tz)).astimezone(tz)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
    job = scheduler.get_job(job_id)
    if job:
        scheduler.remove_job(job_id)
        print(f"üóëÔ∏è –°—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' —É–¥–∞–ª–µ–Ω–∞")

    scheduler.add_job(
        func,
        trigger=IntervalTrigger(days=interval_minutes, start_date=effective_start, timezone=tz),
        id=job_id,
        replace_existing=True,
        misfire_grace_time=172800,
    )
    print(f"üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ '{job_id}' —Å–æ–∑–¥–∞–Ω–∞. –°—Ç–∞—Ä—Ç: {effective_start}")


def schedule_or_reschedule(job_id, func, interval_minutes, session_maker, start_date=None):
    job = scheduler.get_job(job_id)
    tz = ZoneInfo("Europe/Moscow")
    now = datetime.now(tz)
    effective_start = (start_date or now).astimezone(tz)

    if job:
        current_job_interval = job.trigger.interval.days
        #current_job_interval = job.trigger.interval.total_seconds() // 60
        if int(current_job_interval) != interval_minutes:
            next_run_time = getattr(job, "next_run_time", None)
            if next_run_time:
                new_start_date = next_run_time + timedelta(days=int(interval_minutes))
            else:
                new_start_date = effective_start

            scheduler.modify_job(
                job_id,
                trigger=IntervalTrigger(days=interval_minutes, start_date=new_start_date, timezone=tz)
            )
            print(
                f"üïí '{job_id}' –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_minutes} –º–∏–Ω –Ω–∞—á–∏–Ω–∞—è —Å {new_start_date}")
        else:
            print(f"‚úÖ '{job_id}' —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_minutes} –º–∏–Ω.")
    else:
        scheduler.add_job(
            func,
            trigger=IntervalTrigger(days=interval_minutes, start_date=effective_start, timezone=tz),
            id=job_id,
            replace_existing=True,
            misfire_grace_time=172800,
        )
        print(f"üÜï '{job_id}' —Å–æ–∑–¥–∞–Ω–∞. –°—Ç–∞—Ä—Ç: {effective_start}")

    job = scheduler.get_job(job_id)
    next_run_time = getattr(job, "next_run_time", None)

    if job and next_run_time:
        next_run_msk = next_run_time.astimezone(tz)
        print(f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ '{job_id}' –≤: {next_run_msk}")

        if now > next_run_msk:
            delta = (now - next_run_msk).total_seconds()
            if delta <= 172800:
                print(
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ '{job_id}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –≤ {next_run_msk}). –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.")

                async def maybe_run(session_maker):
                    async with session_maker() as session:
                        exists = await check_if_already_processed(session, job_id, next_run_msk)
                        if exists:
                            print(
                                f"üõë '{job_id}' —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç {next_run_msk}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫.")
                            return
                        print(f"‚ñ∂Ô∏è –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ '{job_id}'...")
                        if asyncio.iscoroutinefunction(func):
                            await func()
                        else:
                            func()

                    await maybe_run(session_maker)
            else:
                print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∑–∞–ø—É—Å–∫ '{job_id}' –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 2 –¥–Ω—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")


async def schedule_feedback_jobs(session_maker):
    global current_interval

    async with session_maker() as session:
        result = await session.execute(select(Setting).where(Setting.key == "global_interval"))
        setting = result.scalar_one_or_none()

        interval_minutes = int(setting.value) if setting and setting.value else 2
        start_date = (
            setting.first_matching_date
            if setting and setting.first_matching_date
            else datetime.now(ZoneInfo("Europe/Moscow"))
        )

        pairing_day = interval_minutes * 7

    if not scheduler.running:
        scheduler.add_listener(job_listener, EVENT_JOB_EXECUTED)
        scheduler.start()

    if current_interval != interval_minutes:
        print(f"üîÅ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è: {current_interval} ‚û°Ô∏è {interval_minutes}")
        current_interval = interval_minutes


    start_date_for_auto_pairing = start_date
    schedule_or_reschedule("auto_pairing_weekly", auto_pairing_wrapper, pairing_day, session_maker,
                           start_date=start_date_for_auto_pairing)

    start_date_for_feedback_dispatcher = await schedule_feedback_dispatcher_for_auto_pairing(
        start_date_for_auto_pairing)
    schedule_or_reschedule("feedback_dispatcher", feedback_dispatcher_wrapper, pairing_day, session_maker,
                           start_date=start_date_for_feedback_dispatcher)

    schedule_or_reschedule("reload_jobs_checker", reload_scheduled_wrapper, 1, session_maker,
                           start_date=start_date_for_auto_pairing)

    show_next_runs(scheduler)


# —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥—É–±–ª–µ–π
async def check_if_already_processed(session, job_id: str, expected_run_time: datetime) -> bool:
    lower = expected_run_time.replace(second=0, microsecond=0)
    upper = lower + timedelta(minutes=1)
    if job_id == "auto_pairing_weekly":
        result = await session.execute(
            select(Pair).where(Pair.paired_at.between(lower, upper))
        )
        return result.scalars().first() is not None

    return False


async def reload_scheduled_jobs(session_maker):
    async with session_maker() as session:
        result = await session.execute(select(Setting).where(Setting.key == "global_interval"))
        setting = result.scalar_one_or_none()
        new_interval_minutes = int(setting.value) if setting and setting.value else 2

    global current_interval
    # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
    if current_interval != new_interval_minutes:
        logger.info(f"üîÅ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è: {current_interval} ‚û°Ô∏è {new_interval_minutes}")
        current_interval = new_interval_minutes

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        await schedule_feedback_jobs(session_maker)
    else:
        logger.debug("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è. –ó–∞–¥–∞—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Å –ø—Ä–µ–∂–Ω–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º.")