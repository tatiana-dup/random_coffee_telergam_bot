from aiogram import Router, F
from sqlalchemy.ext.asyncio import async_sessionmaker
from aiogram.types import Message
from sqlalchemy import select
from database.models import User

admin_router = Router()


@admin_router.message(F.text.lower() == "/all")
async def list_participants(message: Message, session: async_sessionmaker):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with session() as s:
        result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
        if not user or not user.is_admin:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        result = await s.execute(select(User).where(User.is_active == True))
        participants = result.scalars().all()

        if not participants:
            await message.answer("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ Random Coffee:\n\n"
        for i, user in enumerate(participants, start=1):
            username = f"@{user.username}"
            text += f"{i}. {username} (ID: {user.telegram_id})\n"

        await message.answer(text)