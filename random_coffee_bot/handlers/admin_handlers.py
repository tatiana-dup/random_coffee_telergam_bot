from aiogram import Router, F
from sqlalchemy.ext.asyncio import async_sessionmaker
from aiogram.types import Message
from sqlalchemy import select
from database.models import User, Setting, Pair
from datetime import datetime
from bot import get_users_ready_for_matching
from random import shuffle
admin_router = Router()

# —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@admin_router.message(F.text.lower() == "/all")
async def list_participants(message: Message, session: async_sessionmaker):
    async with session() as s:
        result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if not user or not user.is_admin:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        result = await s.execute(select(User).where(User.is_active == True))
        participants = result.scalars().all()

        if not participants:
            await message.answer("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
            return

        # –≤–º–µ—Å—Ç–æ username –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å first_name and last_name –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ Random Coffee:\n\n"
        for i, user in enumerate(participants, start=1):
            username = f"@{user.username}"
            interval = F'{user.pairing_interval}'
            text += f"{i}. {username}, (ID: {user.telegram_id}), –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤—Å—Ç—Ä–µ—á —Ä–∞–∑ –≤ {interval} –Ω–µ–¥–µ–ª–∏\n"

        await message.answer(text)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(F.text.lower().startswith("/delete_user"))
async def delete_user(message: Message, session: async_sessionmaker):
    async with session() as s:
        result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
        admin = result.scalar_one_or_none()

        if not admin or not admin.is_admin:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        user_id_to_delete = message.text.split(" ")[1]

        if not user_id_to_delete.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /delete_user 123456789")
            return

        user_id_to_delete = int(user_id_to_delete)

        result = await s.execute(select(User).where(User.telegram_id == user_id_to_delete))
        user_to_delete = result.scalar_one_or_none()

        if not user_to_delete:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await s.delete(user_to_delete)
        await s.commit()

        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} –±—ã–ª —É–¥–∞–ª—ë–Ω.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(F.text.lower().startswith("/add_user"))
async def add_user(message: Message, session: async_sessionmaker):
    async with session() as s:
        result = await s.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        admin = result.scalar_one_or_none()

        if not admin or not admin.is_admin:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        parts = message.text.strip().split()

        if len(parts) < 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /add_user 123456789")
            return

        user_id_to_add = parts[1]

        if not user_id_to_add.isdigit():
            await message.answer("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        user_id_to_add = int(user_id_to_add)

        result = await s.execute(select(User).where(User.telegram_id == user_id_to_add))
        existing_user = result.scalar_one_or_none()

        if existing_user:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_add} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            telegram_id=user_id_to_add,
            is_active=True,
            is_in_group=True,
            is_blocked=False,
            is_admin=False,
            joined_at=datetime.utcnow()
        )

        s.add(new_user)
        await s.commit()

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_add} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º
@admin_router.message(F.text.lower().startswith("/set_interval"))
async def set_global_interval(message: Message, session: async_sessionmaker):
    async with session() as s:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
        admin = result.scalar_one_or_none()
        if not admin or not admin.is_admin:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return

        parts = message.text.strip().split()
        if len(parts) != 2 or not parts[1].isdigit():
            await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –Ω–µ–¥–µ–ª—è—Ö. –ü—Ä–∏–º–µ—Ä: /set_interval 3")
            return

        interval = parts[1]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        result = await s.execute(select(Setting).where(Setting.key == "global_interval"))
        setting = result.scalar_one_or_none()
        if setting:
            setting.value = interval
        else:
            s.add(Setting(key="global_interval", value=interval))

        await s.commit()
        await message.answer(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Ä–∞–∑ –≤ {interval} –Ω–µ–¥–µ–ª—å.")

#—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä
@admin_router.message(F.text.lower().startswith("/form_pairs"))
async def form_pairs_cmd(message: Message, session: async_sessionmaker):
    async with session() as s:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
        admin = result.scalar_one_or_none()
        if not admin or not admin.is_admin:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø–æ–¥–±–æ—Ä—É
        candidates = await get_users_ready_for_matching(s)

        if len(candidates) < 2:
            await message.answer("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä.")
            return

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞—Ä
        shuffle(candidates)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã
        pairs = []
        for i in range(0, len(candidates) - 1, 2):
            user1 = candidates[i]
            user2 = candidates[i + 1]
            pair = Pair(user1_id=user1.id, user2_id=user2.id)
            pairs.append(pair)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—Ä—ã —É –æ–±–æ–∏—Ö
            user1.last_paired_at = datetime.utcnow()
            user2.last_paired_at = datetime.utcnow()

            s.add(pair)

        await s.commit()

        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(pairs)} –ø–∞—Ä.")