import logging

from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from sqlalchemy import select, or_, desc, update
from sqlalchemy.ext.asyncio import async_sessionmaker
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db import AsyncSessionLocal
from database.models import User, Pair, Feedback
from texts import TEXTS
from bot import save_comment

logger = logging.getLogger(__name__)

user_router = Router()


@user_router.message(CommandStart())
async def process_start_command(message: Message):
    logger.info('–í–æ—à–ª–∏ –≤ —Ö—ç–Ω–¥–ª–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—É /start')
    if message.from_user is None:
        await message.answer(TEXTS['error_access'])
        return

    async with AsyncSessionLocal() as session:
        query = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()

        if user is None:
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é.')
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username
            )
            session.add(user)
            await session.commit()
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.')
            await message.answer(TEXTS['start'])
        else:
            if not user.is_active:
                user.is_active = True
                await session.commit()
                logger.info('–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –ê–∫—Ç–∏–≤–Ω—ã–π.')
            await message.answer(TEXTS['re_start'])

# –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å is_active –Ω–∞ 1
# @user_router.message(F.text.lower() == "/join")
# async def join_random_coffee(message: Message, session: async_sessionmaker):
#     async with session() as s:
#         result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
#         user = result.scalar_one_or_none()
#
#         if user:
#             if user.is_active:
#                 await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ Random Coffee üòä")
#             else:
#                 user.is_active = True
#                 await s.commit()
#                 await message.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Random Coffee!")
#         else:
#             await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å is_active –Ω–∞ 0
# @user_router.message(F.text.lower() == "/leave")
# async def leave_random_coffee(message: Message, session: async_sessionmaker):
#     async with session() as s:
#         result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
#         user = result.scalar_one_or_none()
#
#         if user:
#             if not user.is_active:
#                 await message.answer("–í—ã —É–∂–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ Random Coffee üò¥")
#             else:
#                 user.is_active = False
#                 await s.commit()
#                 await message.answer("‚ùå –í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —É—á–∞—Å—Ç–∏—è –≤ Random Coffee. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ!")
#         else:
#             await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–µ–±–µ
# @user_router.message(F.text.lower() == "/me")
# async def user_profile(message: Message, session: async_sessionmaker):
#     async with session() as s:
#         result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
#         user = result.scalar_one_or_none()
#
#         if not user:
#             await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
#             return
#
#         # –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è
#         status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç"
#
#         # –ò–Ω—Ç–µ—Ä–≤–∞–ª
#         interval = f"{user.pairing_interval} –¥–Ω–µ–π" if user.pairing_interval else "–Ω–µ –∑–∞–¥–∞–Ω"
#
#         # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—Ä—ã
#         pair_result = await s.execute(
#             select(Pair)
#             .where(or_(Pair.user1_id == user.id, Pair.user2_id == user.id))
#             .order_by(desc(Pair.paired_at))
#             .limit(1)
#         )
#         last_pair = pair_result.scalar_one_or_none()
#
#         if last_pair:
#             if last_pair.user1_id == user.id:
#                 partner_username = last_pair.user2_username
#             else:
#                 partner_username = last_pair.user1_username
#             pair_info = f"@{partner_username}"
#         else:
#             pair_info = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
#
#         await message.answer(
#             f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
#             f"üîπ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
#             f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n"
#             f"üîπ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—á–∞—Å—Ç–∏—è: {interval}\n"
#             f"\n"
#             f"üë• –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä–∞: {pair_info}"
#         )

# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
# def get_interval_keyboard() -> InlineKeyboardMarkup:
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [
#             InlineKeyboardButton(text="1 —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏", callback_data="interval_2"),
#             InlineKeyboardButton(text="1 —Ä–∞–∑ –≤ 3 –Ω–µ–¥–µ–ª–∏", callback_data="interval_3"),
#             InlineKeyboardButton(text="1 —Ä–∞–∑ –≤ 4 –Ω–µ–¥–µ–ª–∏", callback_data="interval_4"),
#         ]
#     ])
#     return keyboard

# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
# @user_router.message(F.text.lower() == "/interval")
# async def change_interval_prompt(message: Message):
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Random Coffee:",
#         reply_markup=get_interval_keyboard()
#     )
#
# # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –±–∞–∑–µ
# @user_router.callback_query(F.data.startswith("interval_"))
# async def set_pairing_interval(callback: CallbackQuery, session: async_sessionmaker):
#     interval_weeks = int(callback.data.split("_")[1])
#     user_id = callback.from_user.id
#
#     async with session() as s:
#         result = await s.execute(select(User).where(User.telegram_id == user_id))
#         user = result.scalar_one_or_none()
#
#         if not user:
#             await callback.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
#             return
#
#         user.pairing_interval = interval_weeks
#         await s.commit()
#
#         await callback.answer(f"–¢–µ–ø–µ—Ä—å —Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å —Ä–∞–∑ –≤ {interval_weeks} –Ω–µ–¥–µ–ª–∏.", show_alert=True)


class FeedbackStates(StatesGroup):
    waiting_for_feedback_decision = State()
    waiting_for_comment_decision = State()
    writing_comment = State()

# --- –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ---

def meeting_question_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="meeting_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="meeting_no")]
    ])

def comment_question_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="leave_comment")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è", callback_data="no_comment")]
    ])

# --- –°—Ç–∞—Ä—Ç –∑–∞–ø—Ä–æ—Å–∞ ---
@user_router.message(F.text == "/feedback")
async def ask_meeting_feedback(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–æ—à–ª–∞ –ª–∏ –≤—Å—Ç—Ä–µ—á–∞?", reply_markup=meeting_question_kb())
    await state.set_state(FeedbackStates.waiting_for_feedback_decision)

# --- –û—Ç–≤–µ—Ç: –î–∞/–ù–µ—Ç –≤—Å—Ç—Ä–µ—á–∞ ---
@user_router.callback_query(F.data.in_(["meeting_yes", "meeting_no"]))
async def process_meeting_feedback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "meeting_no":
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!")
        await state.clear()
    else:
        await callback.message.answer("–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?", reply_markup=comment_question_kb())
        await state.set_state(FeedbackStates.waiting_for_comment_decision)

# --- –û—Ç–≤–µ—Ç: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–µ—Ç ---
@user_router.callback_query(F.data.in_(["leave_comment", "no_comment"]))
async def process_comment_choice(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == "no_comment":
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –û—Ç–∑—ã–≤ —É—á—Ç—ë–Ω ‚úÖ")
        await state.clear()
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        await state.set_state(FeedbackStates.writing_comment)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ---
@user_router.message(FeedbackStates.writing_comment, F.text)
async def receive_comment(message: types.Message, state: FSMContext, **kwargs):
    session_maker = kwargs['session']  # <- –ø–æ–ª—É—á–∞–µ–º –∏–∑ workflow_data
    user_id = message.from_user.id
    comment_text = message.text

    status_msg = await save_comment(user_id, comment_text, session_maker)
    await message.answer(status_msg)
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ /cancel ---
@user_router.message(F.text == "/cancel")
async def cancel_feedback(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå")