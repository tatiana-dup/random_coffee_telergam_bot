import logging

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.ext.asyncio import async_sessionmaker

from database.db import AsyncSessionLocal
from database.models import User
from texts import TEXTS


logger = logging.getLogger(__name__)

user_router = Router()


@user_router.message(CommandStart())
async def process_start_command(message: Message):
    logger.info('–í–æ—à–ª–∏ –≤ —Ö—ç–Ω–¥–ª–µ—Ä, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—É /start')
    if message.from_user is None:
        await message.answer(TEXTS['error_access'])
        return

    async with AsyncSessionLocal() as session:
        query = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()

        if user is None:
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é.')
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username
            )
            session.add(user)
            await session.commit()
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.')
            await message.answer(TEXTS['start'])
        else:
            if not user.is_active:
                user.is_active = True
                await session.commit()
                logger.info('–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –ê–∫—Ç–∏–≤–Ω—ã–π.')
            await message.answer(TEXTS['re_start'])

# –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å is_active –Ω–∞ 1
@user_router.message(F.text.lower() == "/join")
async def join_random_coffee(message: Message, session: async_sessionmaker):
    async with session() as s:
        result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if user:
            if user.is_active:
                await message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ Random Coffee üòä")
            else:
                user.is_active = True
                await s.commit()
                await message.answer("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ Random Coffee!")
        else:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å is_active –Ω–∞ 0
@user_router.message(F.text.lower() == "/leave")
async def leave_random_coffee(message: Message, session: async_sessionmaker):
    async with session() as s:
        result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if user:
            if not user.is_active:
                await message.answer("–í—ã —É–∂–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ Random Coffee üò¥")
            else:
                user.is_active = False
                await s.commit()
                await message.answer("‚ùå –í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —É—á–∞—Å—Ç–∏—è –≤ Random Coffee. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ!")
        else:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–µ–±–µ
@user_router.message(F.text.lower() == "/me")
async def user_profile(message: Message, session: async_sessionmaker):
    async with session() as s:
        result = await s.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        # –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É–µ—Ç"

        # –ò–Ω—Ç–µ—Ä–≤–∞–ª
        interval = f"{user.pairing_interval} –Ω–µ–¥–µ–ª—å" if user.pairing_interval else "–Ω–µ –∑–∞–¥–∞–Ω"

        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç—É—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–º—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã

        await message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üîπ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üîπ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—á–∞—Å—Ç–∏—è: {interval}\n"
            f"\n"
            f"üë• –ü–∞—Ä–∞: (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
        )